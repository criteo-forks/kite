From 29add2ff5a9e0179cfca68b555736c65497790bb Mon Sep 17 00:00:00 2001
From: Wolfgang Hoschek <whoschek@cloudera.com>
Date: Fri, 11 Sep 2015 10:26:32 -0700
Subject: [PATCH 104/140] KITE-1069: Make zkClientSessionTimeout and
 zkClientConnectTimeout configurable in SolrLocator

---
 .../org/kitesdk/morphline/solr/SolrLocator.java    |   17 +++++++++++++++--
 .../morphline/solr/ZooKeeperDownloader.java        |    6 +++++-
 2 files changed, 20 insertions(+), 3 deletions(-)

diff --git a/kite-morphlines/kite-morphlines-solr-core/src/main/java/org/kitesdk/morphline/solr/SolrLocator.java b/kite-morphlines/kite-morphlines-solr-core/src/main/java/org/kitesdk/morphline/solr/SolrLocator.java
index a207822..5af3342 100644
--- a/kite-morphlines/kite-morphlines-solr-core/src/main/java/org/kitesdk/morphline/solr/SolrLocator.java
+++ b/kite-morphlines/kite-morphlines-solr-core/src/main/java/org/kitesdk/morphline/solr/SolrLocator.java
@@ -59,7 +59,14 @@ public class SolrLocator {
   private String solrUrl;
   private String solrHomeDir;
   private int batchSize = 10000;
+  private int zkClientSessionTimeout = DEFAULT_ZK_CLIENT_SESSION_TIMEOUT;
+  private int zkClientConnectTimeout = DEFAULT_ZK_CLIENT_CONNECT_TIMEOUT;
   
+  private static final int DEFAULT_ZK_CLIENT_SESSION_TIMEOUT = Integer.parseInt(System.getProperty(
+      SolrLocator.class.getName() + ".zkClientSessionTimeout", String.valueOf(60 * 1000)));
+  private static final int DEFAULT_ZK_CLIENT_CONNECT_TIMEOUT = Integer.parseInt(System.getProperty(
+      SolrLocator.class.getName() + ".zkClientConnectTimeout", String.valueOf(60 * 1000)));
+      
   private static final Logger LOG = LoggerFactory.getLogger(SolrLocator.class);
 
   protected SolrLocator(MorphlineContext context) {
@@ -76,6 +83,8 @@ public class SolrLocator {
     solrHomeDir = configs.getString(config, "solrHomeDir", null);
     solrUrl = configs.getString(config, "solrUrl", null);    
     batchSize = configs.getInt(config, "batchSize", batchSize);
+    zkClientSessionTimeout = configs.getInt(config, "zkClientSessionTimeout", zkClientSessionTimeout);
+    zkClientConnectTimeout = configs.getInt(config, "zkClientConnectTimeout", zkClientConnectTimeout);
     LOG.trace("Constructed solrLocator: {}", this);
     configs.validateArguments(config);
   }
@@ -87,6 +96,8 @@ public class SolrLocator {
       }
       CloudSolrServer cloudSolrServer = new CloudSolrServer(zkHost);
       cloudSolrServer.setDefaultCollection(collectionName);
+      cloudSolrServer.setZkClientTimeout(zkClientSessionTimeout); 
+      cloudSolrServer.setZkConnectTimeout(zkClientConnectTimeout); 
       return cloudSolrServer;
     } else {
       if (solrUrl == null && solrHomeDir != null) {
@@ -156,7 +167,7 @@ public class SolrLocator {
               "Parameter 'zkHost' requires that you also pass parameter 'collection'", config);
         }
         ZooKeeperDownloader zki = new ZooKeeperDownloader();
-        SolrZkClient zkClient = zki.getZkClient(zkHost);
+        SolrZkClient zkClient = zki.getZkClient(zkHost, zkClientSessionTimeout, zkClientConnectTimeout);
         try {
           String configName = zki.readConfigName(zkClient, collectionName);
           downloadedSolrHomeDir = Files.createTempDir();
@@ -224,7 +235,9 @@ public class SolrLocator {
         " zkHost : " + toJson(zkHost) + ", " +
         " solrUrl : " + toJson(solrUrl) + ", " +
         " solrHomeDir : " + toJson(solrHomeDir) + ", " +
-        " batchSize : " + toJson(batchSize) + " " +
+        " batchSize : " + toJson(batchSize) + ", " +
+        " zkClientSessionTimeout : " + toJson(zkClientSessionTimeout) + ", " +
+        " zkClientConnectTimeout : " + toJson(zkClientConnectTimeout) + " " +
         "}";
     return ConfigFactory.parseString(json);
   }
diff --git a/kite-morphlines/kite-morphlines-solr-core/src/main/java/org/kitesdk/morphline/solr/ZooKeeperDownloader.java b/kite-morphlines/kite-morphlines-solr-core/src/main/java/org/kitesdk/morphline/solr/ZooKeeperDownloader.java
index 9796edb..61e2fb6 100644
--- a/kite-morphlines/kite-morphlines-solr-core/src/main/java/org/kitesdk/morphline/solr/ZooKeeperDownloader.java
+++ b/kite-morphlines/kite-morphlines-solr-core/src/main/java/org/kitesdk/morphline/solr/ZooKeeperDownloader.java
@@ -43,13 +43,17 @@ final class ZooKeeperDownloader {
   private static final Logger LOG = LoggerFactory.getLogger(ZooKeeperDownloader.class);
   
   public SolrZkClient getZkClient(String zkHost) {
+    return getZkClient(zkHost, 60000, 60000);
+  }
+  
+  public SolrZkClient getZkClient(String zkHost, int zkClientSessionTimeout, int zkClientConnectTimeout) {
     if (zkHost == null) {
       throw new IllegalArgumentException("zkHost must not be null");
     }
 
     SolrZkClient zkClient;
     try {
-      zkClient = new SolrZkClient(zkHost, 30000);
+      zkClient = new SolrZkClient(zkHost, zkClientSessionTimeout, zkClientConnectTimeout);
     } catch (Exception e) {
       throw new IllegalArgumentException("Cannot connect to ZooKeeper: " + zkHost, e);
     }
-- 
1.7.9.5


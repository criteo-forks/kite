From 8d68375bcacf3f9004b35d8af7a5a035369b1b41 Mon Sep 17 00:00:00 2001
From: Wolfgang Hoschek <whoschek@cloudera.com>
Date: Thu, 11 Feb 2016 09:36:47 -0800
Subject: [PATCH 126/140] KITE-1108: syncup

---
 .../metrics/scalable/CoordinatedOmissionTimer.java |   62 ++++++++++++++++++++
 .../morphline/metrics/scalable/MetricBuilders.java |   42 +++++++++++++
 .../metrics/scalable/TDigestReservoir.java         |   24 ++++----
 3 files changed, 114 insertions(+), 14 deletions(-)
 create mode 100644 kite-morphlines/kite-morphlines-metrics-scalable/src/main/java/org/kitesdk/morphline/metrics/scalable/CoordinatedOmissionTimer.java

diff --git a/kite-morphlines/kite-morphlines-metrics-scalable/src/main/java/org/kitesdk/morphline/metrics/scalable/CoordinatedOmissionTimer.java b/kite-morphlines/kite-morphlines-metrics-scalable/src/main/java/org/kitesdk/morphline/metrics/scalable/CoordinatedOmissionTimer.java
new file mode 100644
index 0000000..1d1f609
--- /dev/null
+++ b/kite-morphlines/kite-morphlines-metrics-scalable/src/main/java/org/kitesdk/morphline/metrics/scalable/CoordinatedOmissionTimer.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright 2013 Cloudera Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kitesdk.morphline.metrics.scalable;
+
+import java.util.concurrent.TimeUnit;
+
+import com.codahale.metrics.Timer;
+
+/**
+ * A timer that autocorrects for the "Coordinated Omission Problem" described at
+ * https://groups.google.com/forum/#!msg/mechanical-sympathy/icNZJejUHfE/BfDekfBEs_sJ and
+ * https://www.youtube.com/watch?v=lJ8ydIuPFeU in the same way as Gil Tene's HdrHistogram per
+ * https://github.com/HdrHistogram/HdrHistogram
+ * 
+ * The corrected values are forwarded to an underlying codahale metrics {@link Timer}. This class
+ * also maintains a timer that does not apply autocorrection so that corrected vs. uncorrected
+ * values are always available and can always be plotted and compared.
+ */
+final class CoordinatedOmissionTimer {
+  
+  private Timer uncorrectedTimer;
+  private Timer correctedTimer;
+  private long expectedNanoIntervalBetweenSamples;
+  
+  public CoordinatedOmissionTimer(Timer uncorrectedTimer, Timer correctedTimer, long expectedNanoIntervalBetweenSamples) {
+    this.uncorrectedTimer = uncorrectedTimer;
+    this.correctedTimer = correctedTimer;
+    if (expectedNanoIntervalBetweenSamples < 0) {
+      throw new IllegalArgumentException(
+          "expectedNanoIntervalBetweenSamples must be >= 0: " + expectedNanoIntervalBetweenSamples);
+    }
+    this.expectedNanoIntervalBetweenSamples = expectedNanoIntervalBetweenSamples;
+  }
+  
+  public void update(long duration, TimeUnit unit) {
+    long nanoDuration = unit.toNanos(duration);
+    uncorrectedTimer.update(nanoDuration, TimeUnit.NANOSECONDS);
+    if (correctedTimer != null) {
+      correctedTimer.update(nanoDuration, TimeUnit.NANOSECONDS);    
+      long interval = expectedNanoIntervalBetweenSamples;
+      if (interval > 0) {
+        for (long missingDuration = nanoDuration - interval; missingDuration >= interval; missingDuration -= interval) {
+          correctedTimer.update(missingDuration, TimeUnit.NANOSECONDS);
+        }
+      }
+    }
+  }
+
+}
diff --git a/kite-morphlines/kite-morphlines-metrics-scalable/src/main/java/org/kitesdk/morphline/metrics/scalable/MetricBuilders.java b/kite-morphlines/kite-morphlines-metrics-scalable/src/main/java/org/kitesdk/morphline/metrics/scalable/MetricBuilders.java
index da6434c..2ec51fd 100644
--- a/kite-morphlines/kite-morphlines-metrics-scalable/src/main/java/org/kitesdk/morphline/metrics/scalable/MetricBuilders.java
+++ b/kite-morphlines/kite-morphlines-metrics-scalable/src/main/java/org/kitesdk/morphline/metrics/scalable/MetricBuilders.java
@@ -31,6 +31,18 @@ import com.codahale.metrics.Timer;
  * Utilities for codahale metrics library.
  */
 class MetricBuilders {
+  
+  private static final boolean DISABLE_COORDINATED_OMISSION_CORRECTION = 
+      Boolean.getBoolean("disableCoordinatedOmissionCorrection");
+  
+  private static final long MAX_CORRECTED_SLIDING_TIME_WINDOW_SAMPLES = 
+      Long.getLong("maxCorrectedSlidingTimeWindowSamples", 10 * 1000);
+  
+  private static final String COORDINATED_OMISSION_CORRECTION = "_corrected";
+  
+  private String coordinatedOmissionCorrectionName(String name) {
+    return name + COORDINATED_OMISSION_CORRECTION;
+  }
 
   public Counter getCounter(MetricRegistry registry, String name) {
     return getOrAdd(registry, name, COUNTERS);
@@ -48,6 +60,13 @@ class MetricBuilders {
     return getOrAdd(registry, name, TIMERS);
   }
 
+  public CoordinatedOmissionTimer getTimer(MetricRegistry registry, String name, long expectedNanoIntervalBetweenSamples) {
+    return new CoordinatedOmissionTimer(
+        getTimer(registry, name), 
+        DISABLE_COORDINATED_OMISSION_CORRECTION ? null : getTimer(registry, coordinatedOmissionCorrectionName(name)), 
+        expectedNanoIntervalBetweenSamples);
+  }
+
   public Histogram getSlidingWindowHistogram(MetricRegistry registry, String name, final int size) {
     return getOrAdd(registry, name, new MetricBuilder<Histogram>() {
       @Override
@@ -88,6 +107,14 @@ class MetricBuilders {
     });
   }
 
+  public CoordinatedOmissionTimer getSlidingWindowTimer(MetricRegistry registry, String name, int size, 
+      long expectedNanoIntervalBetweenSamples) {
+    return new CoordinatedOmissionTimer(
+        getSlidingWindowTimer(registry, name, size), 
+        DISABLE_COORDINATED_OMISSION_CORRECTION ? null : getSlidingWindowTimer(registry, coordinatedOmissionCorrectionName(name), size), 
+        expectedNanoIntervalBetweenSamples);
+  }
+
   public Timer getSlidingTimeWindowTimer(MetricRegistry registry, String name, final long window,
       final TimeUnit windowUnit) {
     return getOrAdd(registry, name, new MetricBuilder<Timer>() {
@@ -101,6 +128,21 @@ class MetricBuilders {
       }          
     });
   }
+  
+  public CoordinatedOmissionTimer getSlidingTimeWindowTimer(MetricRegistry registry, String name, long window,
+      TimeUnit windowUnit, long expectedNanoIntervalBetweenSamples) {
+    Timer correctedTimer;    
+    if (!DISABLE_COORDINATED_OMISSION_CORRECTION && expectedNanoIntervalBetweenSamples > 0 
+        && windowUnit.toNanos(window) / expectedNanoIntervalBetweenSamples <= MAX_CORRECTED_SLIDING_TIME_WINDOW_SAMPLES) {
+      correctedTimer = getSlidingTimeWindowTimer(registry, coordinatedOmissionCorrectionName(name), window, windowUnit);
+    } else { // at such a high rate the sliding window would likely consume too much main memory - so we disable it
+      correctedTimer = null;
+    }
+    return new CoordinatedOmissionTimer(
+        getSlidingTimeWindowTimer(registry, name, window, windowUnit),
+        correctedTimer,
+        expectedNanoIntervalBetweenSamples);
+  }
 
   @SuppressWarnings("unchecked")
   protected <T extends Metric> T getOrAdd(MetricRegistry registry, String name, MetricBuilder<T> builder) {
diff --git a/kite-morphlines/kite-morphlines-metrics-scalable/src/main/java/org/kitesdk/morphline/metrics/scalable/TDigestReservoir.java b/kite-morphlines/kite-morphlines-metrics-scalable/src/main/java/org/kitesdk/morphline/metrics/scalable/TDigestReservoir.java
index c6043b5..6b2f60c 100644
--- a/kite-morphlines/kite-morphlines-metrics-scalable/src/main/java/org/kitesdk/morphline/metrics/scalable/TDigestReservoir.java
+++ b/kite-morphlines/kite-morphlines-metrics-scalable/src/main/java/org/kitesdk/morphline/metrics/scalable/TDigestReservoir.java
@@ -42,9 +42,7 @@ public final class TDigestReservoir implements Reservoir {
   
   @Override
   synchronized public int size() {
-    long size = stats.getCount();
-    Preconditions.checkArgument(size <= Integer.MAX_VALUE);
-    return (int) size;
+    return (int) Math.min(stats.getCount(), Integer.MAX_VALUE);
   }
 
   @Override
@@ -76,14 +74,12 @@ public final class TDigestReservoir implements Reservoir {
         
     @Override
     public int size() {
-      long size = stats.getCount();
-      Preconditions.checkArgument(size <= Integer.MAX_VALUE);
-      return (int) size;
+      return (int) Math.min(stats.getCount(), Integer.MAX_VALUE);
     }
 
     @Override
     public long getMax() {
-      if (size() == 0) {
+      if (stats.getCount() == 0) {
         return 0;
       }
       return Math.round(stats.getMax());
@@ -91,7 +87,7 @@ public final class TDigestReservoir implements Reservoir {
 
     @Override
     public long getMin() {
-      if (size() == 0) {
+      if (stats.getCount() == 0) {
         return 0;
       }
       return Math.round(stats.getMin());
@@ -99,24 +95,24 @@ public final class TDigestReservoir implements Reservoir {
 
     @Override
     public double getMean() {
-      if (size() == 0) {
-        return 0;
+      if (stats.getCount() == 0) {
+        return 0.0;
       }
       return stats.getMean();
     }
 
     @Override
     public double getStdDev() {
-      if (size() == 0) {
-        return 0;
+      if (stats.getCount() == 0) {
+        return 0.0;
       }
       return stats.getStandardDeviation();
     }
 
     @Override
     public double getValue(double quantile) {
-      if (size() == 0) {
-        return 0;
+      if (stats.getCount() == 0) {
+        return 0.0;
       }
       return stats.getQuantile(quantile);
     }
-- 
1.7.9.5


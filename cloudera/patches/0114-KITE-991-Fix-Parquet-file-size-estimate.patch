From 5421a1da557a710da87551d314f46270fe4887f3 Mon Sep 17 00:00:00 2001
From: Ryan Blue <blue@apache.org>
Date: Thu, 24 Sep 2015 15:32:47 -0700
Subject: [PATCH 114/140] KITE-991: Fix Parquet file size estimate.

This fixes size-based rolling for Parquet files and enables the test.
Size-based rolling was previously not working because it wasn't possible
to get the buffered size of a Parquet file. PARQUET-308 exposes an
accessor, which is now available after the update to 1.8.1.
---
 .../data/spi/filesystem/ParquetAppender.java       |    4 +---
 .../data/spi/filesystem/TestAvroWriter.java        |    7 ++++++-
 .../data/spi/filesystem/TestFileSystemWriters.java |    4 +++-
 .../data/spi/filesystem/TestParquetWriter.java     |   12 ++++++------
 4 files changed, 16 insertions(+), 11 deletions(-)

diff --git a/kite-data/kite-data-core/src/main/java/org/kitesdk/data/spi/filesystem/ParquetAppender.java b/kite-data/kite-data-core/src/main/java/org/kitesdk/data/spi/filesystem/ParquetAppender.java
index 5f6478f..9c8ccbe 100644
--- a/kite-data/kite-data-core/src/main/java/org/kitesdk/data/spi/filesystem/ParquetAppender.java
+++ b/kite-data/kite-data-core/src/main/java/org/kitesdk/data/spi/filesystem/ParquetAppender.java
@@ -77,9 +77,7 @@ class ParquetAppender<E extends IndexedRecord> implements FileSystemWriter.FileA
 
   @Override
   public long pos() throws IOException {
-    // TODO: add a callback to set the position when Parquet decides to flush
-    // this is not a good way to find out the current position
-    return fileSystem.getFileStatus(path).getLen();
+    return avroParquetWriter.getDataSize();
   }
 
   @Override
diff --git a/kite-data/kite-data-core/src/test/java/org/kitesdk/data/spi/filesystem/TestAvroWriter.java b/kite-data/kite-data-core/src/test/java/org/kitesdk/data/spi/filesystem/TestAvroWriter.java
index 44c1e81..9cca6bc 100644
--- a/kite-data/kite-data-core/src/test/java/org/kitesdk/data/spi/filesystem/TestAvroWriter.java
+++ b/kite-data/kite-data-core/src/test/java/org/kitesdk/data/spi/filesystem/TestAvroWriter.java
@@ -35,7 +35,7 @@ import org.kitesdk.data.spi.ReaderWriterState;
 public class TestAvroWriter extends TestFileSystemWriters {
   @Override
   public FileSystemWriter<Record> newWriter(Path directory, Schema schema) {
-    return FileSystemWriter.newWriter(fs, directory, 100, 2 * 1024 * 1024,
+    return FileSystemWriter.newWriter(fs, directory, 100, getTargetFileSize(),
         new DatasetDescriptor.Builder()
             .property(
                 "kite.writer.roll-interval-seconds", String.valueOf(10))
@@ -52,6 +52,11 @@ public class TestAvroWriter extends TestFileSystemWriters {
     return new FileSystemDatasetReader<Record>(fs, path, schema, Record.class);
   }
 
+  @Override
+  public long getTargetFileSize() {
+    return 2 * 1024 * 1024;
+  }
+
   @Test
   public void testIsFlushable() {
     Assert.assertTrue(fsWriter instanceof Flushable);
diff --git a/kite-data/kite-data-core/src/test/java/org/kitesdk/data/spi/filesystem/TestFileSystemWriters.java b/kite-data/kite-data-core/src/test/java/org/kitesdk/data/spi/filesystem/TestFileSystemWriters.java
index 9bf04ec..a44d9d5 100644
--- a/kite-data/kite-data-core/src/test/java/org/kitesdk/data/spi/filesystem/TestFileSystemWriters.java
+++ b/kite-data/kite-data-core/src/test/java/org/kitesdk/data/spi/filesystem/TestFileSystemWriters.java
@@ -96,6 +96,8 @@ public abstract class TestFileSystemWriters extends MiniDFSTest {
         written, Lists.newArrayList((Iterator) init(reader)));
   }
 
+  public abstract long getTargetFileSize();
+
   @Test
   public void testTargetFileSize() throws IOException {
     init(fsWriter);
@@ -139,7 +141,7 @@ public abstract class TestFileSystemWriters extends MiniDFSTest {
     Assert.assertTrue("Should match written records",
         Sets.newHashSet(written).equals(Sets.newHashSet(actualContent)));
 
-    double ratioToTarget = (((double) rolledFile.getLen()) / 2 / 1024 / 1024);
+    double ratioToTarget = (((double) rolledFile.getLen()) / getTargetFileSize());
     Assert.assertTrue(
         "Should be within 10% of target size: " + ratioToTarget * 100,
         ratioToTarget > 0.90 && ratioToTarget < 1.10);
diff --git a/kite-data/kite-data-core/src/test/java/org/kitesdk/data/spi/filesystem/TestParquetWriter.java b/kite-data/kite-data-core/src/test/java/org/kitesdk/data/spi/filesystem/TestParquetWriter.java
index 857c396..8dd8f65 100644
--- a/kite-data/kite-data-core/src/test/java/org/kitesdk/data/spi/filesystem/TestParquetWriter.java
+++ b/kite-data/kite-data-core/src/test/java/org/kitesdk/data/spi/filesystem/TestParquetWriter.java
@@ -34,7 +34,7 @@ import org.kitesdk.data.Syncable;
 public class TestParquetWriter extends TestFileSystemWriters {
   @Override
   public FileSystemWriter<Record> newWriter(Path directory, Schema schema) {
-    return FileSystemWriter.newWriter(fs, directory, 1, -1,
+    return FileSystemWriter.newWriter(fs, directory, 1, getTargetFileSize(),
         new DatasetDescriptor.Builder()
             .property(
                 "kite.writer.roll-interval-seconds", String.valueOf(1))
@@ -49,6 +49,11 @@ public class TestParquetWriter extends TestFileSystemWriters {
         fs, path, schema, Record.class);
   }
 
+  @Override
+  public long getTargetFileSize() {
+    return 5 * 1024 * 1024 / 2; // ~2.5MB
+  }
+
   @Test
   public void testIsFlushable() {
     Assert.assertFalse(fsWriter instanceof Flushable);
@@ -112,9 +117,4 @@ public class TestParquetWriter extends TestFileSystemWriters {
     Assert.assertEquals("Enabling the non-durable parquet appender should get us a non-durable appender",
         ParquetAppender.class, writer.newAppender(testDirectory).getClass());
   }
-
-  @Override
-  @Ignore // Needs PARQUET-308 to estimate current file size
-  public void testTargetFileSize() throws IOException {
-  }
 }
-- 
1.7.9.5

